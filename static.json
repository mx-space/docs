[{"id":"/docs/core/advanced","structured":{"contents":[{"heading":"","content":"在您进行进阶部署前，我们给予最后的警告：如果你不是开发者，或者不想折腾，请不要选择进阶部署，因为它需要你具备一定的开发能力。"},{"heading":"","content":"由于自身技术原因导致的问题，我们将不会提供任何技术支持。情节严重者，我们将永久拉黑您的账号。"},{"heading":"要求","content":"已安装 Node.js 20.0.0 或以上版本"},{"heading":"要求","content":"已安装 Git, PNPM, PM2"},{"heading":"要求","content":"已安装 MongoDB, Redis 并正常运行"},{"heading":"启动","content":"进入 ./apps/core，修改 ecosystem.config.js 文件"},{"heading":"启动","content":"将上方复制的内容覆盖进去，然后执行以下命令启动服务"},{"heading":"反向代理-or-","content":"剩下的就是你的事了，你可以使用 Nginx 或者 Caddy 等反向代理工具，也可以使用 Cloudflare 等 CDN 服务。本文不再赘述。"}],"headings":[{"id":"要求","content":"要求"},{"id":"克隆并安装","content":"克隆并安装"},{"id":"构建--bundle","content":"构建 & Bundle"},{"id":"配置-ecosystemconfigjs","content":"配置 ecosystem.config.js"},{"id":"启动","content":"启动"},{"id":"反向代理-or-","content":"反向代理 or ..."}]},"tag":"core","url":"/docs/core/advanced","title":"进阶部署","description":"通过源码部署 Mix-Space 后端"},{"id":"/docs/core/bash","structured":{"contents":[{"heading":"","content":"本脚本由社区用户“Mikuの鬆”维护，如遇问题请前往对应的 Github 仓库提出Issue。"},{"heading":"介绍","content":"这是一种在服务器自动安装 Docker 和进行 MixSpace 后端部署的 Bash 脚本，它可以帮助你交互式快速部署 MixSpace 后端。"},{"heading":"介绍","content":"注意脚本会自动根据是否为中国大陆网络环境按需修改服务器 Docker 安装源和镜像源。"},{"heading":"介绍","content":"脚本支持交互式安装方式和预配置文件的自动安装方式。"},{"heading":"使用","content":"在服务器终端运行以下指令，即可自动进入交互式安装。"},{"heading":"国内服务器","content":"使用 Moeyy 的 GitHub 加速源。"},{"heading":"预配置文件","content":"参考下方示例修改并粘贴到mxshell.env文件,并将其与脚本置于同一目录后运行脚本，脚本会根据配置文件内容自动完成前后端部署。"},{"heading":"配置文件示例","content":"JWT 密钥：需要填写长度不小于 16 个字符，不大于 32 个字符的字符串，用于加密用户的 JWT，务必保存好自己的密钥，不要泄露给他人。"},{"heading":"配置文件示例","content":"被允许的域名：需要填写被允许访问容器的域名，通常是前端的域名，如果允许多个域名访问，用英文逗号，分隔。"},{"heading":"配置文件示例","content":"MixSpace 容器文件存储目录：指定文件存储路径，通常是 /opt/mxspace。"}],"headings":[{"id":"介绍","content":"介绍"},{"id":"使用","content":"使用"},{"id":"海外服务器","content":"海外服务器"},{"id":"国内服务器","content":"国内服务器"},{"id":"预配置文件","content":"预配置文件"},{"id":"配置文件示例","content":"配置文件示例"}]},"tag":"core","url":"/docs/core/bash","title":"Bash 自动脚本","description":"一种自动部署 MixSpace 后端的 Bash 脚本"},{"id":"/docs/core/community","structured":{"contents":[{"heading":"","content":"你可以参考他们的部署方式，但我们不保证它们的可用性。如果你也有教程想要与大家分享的话，欢迎您向文档提交 Pull Request 以分享您的部署方式。"}],"headings":[]},"tag":"core","url":"/docs/core/community","title":"社区分享","description":"社区用户分享的部署方式"},{"id":"/docs/core/docker","structured":{"contents":[{"heading":"安装-docker","content":"如果你的服务器在国内，建议使用阿里云的安装脚本，安装命令如下："},{"heading":"安装-docker","content":"在国外，可以直接使用官方脚本安装："},{"heading":"安装-docker","content":"如果您成功安装了 Docker 和 Docker-Compose，可以通过以下命令查看版本："},{"heading":"拉取配置文件","content":"自 Core v5.7.5 版本开始，Docker 相关配置发生重大变化，请重新阅读本文档（尤其是填入配置文件环节，配置有所变化）"},{"heading":"配置-core-启动配置文件","content":"在下方的表格里填入你的配置，然后点击复制，在 docker-compose.yml 里 environment 字段对应部分的内容后加入，调整细节使其符合 yaml 语法，保存即可。"},{"heading":"配置-core-启动配置文件","content":"鼠标悬停在下方的表格中，可以查看对应的配置项名字。"},{"heading":"配置-core-启动配置文件","content":"JWT 密钥：需要填写长度不小于 16 个字符，不大于 32 个字符的字符串，用于加密用户的 JWT，务必保存好自己的密钥，不要泄露给他人。"},{"heading":"配置-core-启动配置文件","content":"被允许的域名：需要填写被允许的域名，通常是前端的域名，如果允许多个域名访问，用英文逗号，分隔。"},{"heading":"配置-core-启动配置文件","content":"是否开启加密：如果你确定要开启加密，将 false 改为 true，开启加密后，你需要在下方填写加密密钥。"},{"heading":"配置-core-启动配置文件","content":"加密密钥：如果你不知道这是什么，那么不建议开启此功能，具体内容可参考 Key 加密与安全性"},{"heading":"配置-core-启动配置文件","content":"若开启加密，则需注意密钥长度必须为 64 位且只有小写字母和数字，不然会在初始化时报错。注意这是不可逆的，务必保存自己的秘钥。所以并不是非常推荐使用，除非你真的需要加密\nAPI Key."},{"heading":"配置-core-启动配置文件","content":"密钥可以通过 openssl rand -hex 32 命令生成。请务必牢记。"},{"heading":"启动-core","content":"如果你的服务器在国内，无法拉取镜像或拉取速度过慢可自行使用代理或在 docker-compose.yml 里的 image 前添加镜像域名，比如 docker.1panel.top/innei/mx-server:latest。"},{"heading":"启动-core","content":"镜像域名可参考 国内 Docker 服务状态 & 镜像加速监控"},{"heading":"完成","content":"恭喜你完成了 Core 部署，不过仅仅如此是不够的，你需要配置好反向代理之后通过绑定域名登录后台进行初始化，这里不再赘述具体过程。除此之外，如引言所述还需要部署一个前端主题用于展示，请参考 前端主题文档 继续完成部署前端主题的步骤。"}],"headings":[{"id":"安装-docker","content":"安装 Docker"},{"id":"拉取配置文件","content":"拉取配置文件"},{"id":"配置-core-启动配置文件","content":"配置 Core 启动配置文件"},{"id":"启动-core","content":"启动 Core"},{"id":"完成","content":"完成"},{"id":"相关链接","content":"相关链接"}]},"tag":"core","url":"/docs/core/docker","title":"Docker 部署","description":"通过 Docker 部署 Mix-Space 后端"},{"id":"/docs/core/extra","structured":{"contents":[{"heading":"反向代理","content":"在这里提供 Mix-Space 的反代配置步骤。"},{"heading":"反向代理","content":"当然不管使用哪种方法，都建议用控制面板（如宝塔、1Panel 等）完成配置，手写反代配置的大佬随意。"},{"heading":"反向代理","content":"另外，不管是前端还是后端的域名，都需要配置好 HTTPS 证书以保证网站能正常访问。"},{"heading":"图形化界面","content":"现代服务器面板（如 1Panel 和宝塔面板）自带的反向代理已足以满足 Mix-Space 所需的反代要求（包括 Websocket），因此我们更建议非高级用户使用图形化界面来操作和维护"},{"heading":"宝塔面板","content":"进入网站，在反向代理栏目下点击添加反代"},{"heading":"宝塔面板","content":"域名填入你将要使用的域名，目标填写URL地址 + http://127.0.0.1:2333"},{"heading":"1panel","content":"进入网站 > 网站,并创建一个新网站，选择反向代理"},{"heading":"1panel","content":"主域名填入你将要使用的域名，并勾选监听 IPV6，代理类型选择 http ，地址填入 127.0.0.1:2333"},{"heading":"vane","content":"由于 Vane 是一个新开发的反向代理(2025-09-09)，所以请做好出现异常问题的准备，但是不要担心，出现任何代理问题的时候请携带日志给我们，我们会听取你们的反馈，目前已经测试过了 mx-server + Shiroi 请放心使用"},{"heading":"vane","content":"Vane 是一个现代的，100% 使用 Rust 编写的反向代理，其优势是大约 1.5-3MB 的内存占用，整 docker 镜像部署大约占用 5MB 磁盘大小\n详细步骤："},{"heading":"vane","content":"首先使用 SSL 需要先获取证书，Vane 目前不包含 SSL 证书管理，有2个办法是："},{"heading":"vane","content":"1panel & '宝塔面板' 这些 GUI 运维工具自带了 acme.sh 可以GUI管理了给 Vane 导入证书文件"},{"heading":"vane","content":"lazy-acme 这是 Vane 配套的管理工具，后端使用 Lego, 目前只支持 Cloudfalre DNS 验证 + 少量主流免费 CA."},{"heading":"vane","content":"如果使用方法1的话，需要你自行映射证书目录给 ~/vane/cert 或者映射其他任何你喜欢的位置，内部存在的 pem 格式证书在下面 zonefile 内部修改使用"},{"heading":"vane","content":"关于 Vane 部署，推荐使用 docker-compose.yml 部署"},{"heading":"vane","content":"然后需要编写一个 Zone File 采用 TOML 语法, 配置文件默认存放在 \"~/vane/config.toml\"，Vane 虽然支持 * wildcard 匹配，但是还是建议分离域名管理会方便一些，例如："},{"heading":"vane","content":"这样就创建好了2个独立的域名，接下来，在该文件夹内分别创建 example.com.toml 和 api.example.com.toml 注意请替换为实际域名"},{"heading":"vane","content":"以及后端 mx-server"},{"heading":"vane","content":"注意这里 2333 和 2323 端口可能会需要按照你实际部署的 mx-space 来决定端口，如果你自己修改了的话, 以及端口，这里例示使用了\nexample.com 这个裸域名作为前端，api.example.com 具体域名可能需要按照实际情况修改，当然如果你前端想要部署在三级域名上比如 blog.example.com上也是可以的，按照上述配置修改即可"},{"heading":"cloudflare-tunnel","content":"除非你在非完整服务器环境(如在 Sealos 或 Huggingface Space 上部署)，否则我们不推荐在容器内使用该功能，而应在宿主机内配置 Cloudflare Tunnel 以避免后期出现管理不方便等问题"},{"heading":"cloudflare-tunnel","content":"启动该功能需要两个环境变量"},{"heading":"cloudflare-tunnel","content":"ENABLE_CLOUDFLARED = true"},{"heading":"cloudflare-tunnel","content":"CF_ZERO_TRUST_TOKEN = Tunnel 给的令牌（删掉 cloudflared.exe service install，只保留令牌部分）"},{"heading":"详细步骤","content":"1.申请 Cloudflare Zero Trust，关于申请方式请自行查找"},{"heading":"详细步骤","content":"2.添加一条隧道，连接方式选择 Cloudflared，名称任意"},{"heading":"详细步骤","content":"3.添加一个 Public Hostname，回源选择 HTTP，端口选择 2333"},{"heading":"详细步骤","content":"一旦启动成功，你应当在日志中看到如下输出，并在 Cloudflare 后台看到客户端正常上线："},{"heading":"手写配置","content":"手写配置文件需要较高的技术功底，请量力而行"},{"heading":"双域名","content":"这里假定前端域名为 www.example.com，后端为 server.example.com。"},{"heading":"双域名","content":"以下是后端 server.example.com 反代配置部分"},{"heading":"双域名","content":"前端 www.example.com 反代部分"},{"heading":"双域名","content":"如果您使用此部分示例配置 Nginx 反向代理，您的："},{"heading":"双域名","content":"API 地址为 https://server.example.com/api/v2"},{"heading":"双域名","content":"前端（Kami/Shiro）地址为 https://www.example.com"},{"heading":"双域名","content":"GateWay 为 https://server.example.com"},{"heading":"双域名","content":"本地后台为 https://server.example.com/proxy/qaqdmin"},{"heading":"单域名","content":"以下配置文件以 Nginx 为例，请自行修改 SSL 证书路径以及自己的网站域名。"},{"heading":"单域名","content":"若使用 Caddy 进行配置可参考 Caddyfile 文件示例进行相应修改。"},{"heading":"单域名","content":"完整示例如下"},{"heading":"单域名","content":"如果您使用此部分示例配置 Nginx 反向代理，您的："},{"heading":"单域名","content":"API 地址为 https://www.example.com/api/v2"},{"heading":"单域名","content":"前端（Kami/Shiro）地址为 https://www.example.com"},{"heading":"单域名","content":"GateWay 为 https://www.example.com"},{"heading":"单域名","content":"本地后台为 https://www.example.com/proxy/qaqdmin"},{"heading":"配置其他-redis-服务","content":"如果你需要使用来自 (远端 / 非容器) 的 Redis 服务，你可以通过使用 argv 来动态传入对应的配置项。"},{"heading":"配置其他-redis-服务","content":"支持传入如下值："},{"heading":"配置其他-redis-服务","content":"redis_host Redis 服务地址，域名、IP 都可以"},{"heading":"配置其他-redis-服务","content":"redis_port Redis 服务端口"},{"heading":"配置其他-redis-服务","content":"redis_password Redis 服务密码"},{"heading":"配置其他-redis-服务","content":"disable_cache 是否禁用缓存，默认不启用"},{"heading":"配置其他-redis-服务","content":"在默认情况下，我们认为这样已经足够了。"},{"heading":"对于-docker-部署","content":"和编辑其他环境变量一样，在 service.app 的 environment 部分添加你需要传入的值，如下所示："},{"heading":"对于-docker-部署","content":"修改完成后 docker compose up -d 重启服务即可。"},{"heading":"对于进阶部署","content":"针对这种部署方式，我们可以修改 ecosystem.config.js 在 12 行，也就是 script 这一项，添加你需要传入的值，如下所示："},{"heading":"对于进阶部署","content":"当你修改完成，你需要重启服务："},{"heading":"配置其他-mongodb-服务","content":"如果你需要使用来自 (远端 / 非容器) 的 MongoDB 服务，你可以通过使用 argv 来动态传入对应的配置项。"},{"heading":"配置其他-mongodb-服务","content":"支持传入如下值：（除 collection_name 外其余变量名在 Docker 中变量均为对应大写）"},{"heading":"配置其他-mongodb-服务","content":"collection_name 数据库集合名字（Docker 对应变量为 DB_COLLECTION_NAME）"},{"heading":"配置其他-mongodb-服务","content":"db_host MongoDB 服务地址，域名、IP 都可以"},{"heading":"配置其他-mongodb-服务","content":"db_port MongoDB 服务端口"},{"heading":"配置其他-mongodb-服务","content":"db_user MongoDB 服务用户名"},{"heading":"配置其他-mongodb-服务","content":"db_password MongoDB 服务密码"},{"heading":"配置其他-mongodb-服务","content":"db_connection_string MongoDB 数据库连接地址（以 mongodb:// 开头的一串内容），此配置项优先级大于上述五项"},{"heading":"配置其他-mongodb-服务","content":"db_options MongoDB 数据库连接选项"},{"heading":"配置其他-mongodb-服务","content":"如果你需要使用密码登录，你不仅仅需要传入 password，还需要传入 user，建议你对数据库集合划分好用户权限"},{"heading":"对于-docker-部署-1","content":"和编辑其他环境变量一样，在 services.app 的 environment 部分添加你需要传入的值，如下所示："},{"heading":"对于-docker-部署-1","content":"修改完成后 docker compose up -d 重启服务即可。"},{"heading":"对于进阶部署-1","content":"和 Redis 一样，我们可以修改 ecosystem.config.js 在 12 行，也就是 script 这一项，添加你需要传入的值，如下所示："},{"heading":"对于进阶部署-1","content":"当你修改完成，你需要重启服务："}],"headings":[{"id":"反向代理","content":"反向代理"},{"id":"图形化界面","content":"图形化界面"},{"id":"宝塔面板","content":"宝塔面板"},{"id":"1panel","content":"1Panel"},{"id":"vane","content":"Vane"},{"id":"cloudflare-tunnel","content":"Cloudflare Tunnel"},{"id":"详细步骤","content":"详细步骤："},{"id":"手写配置","content":"手写配置"},{"id":"双域名","content":"双域名"},{"id":"单域名","content":"单域名"},{"id":"配置其他-redis-服务","content":"配置其他 Redis 服务"},{"id":"对于-docker-部署","content":"对于 Docker 部署"},{"id":"对于进阶部署","content":"对于进阶部署"},{"id":"配置其他-mongodb-服务","content":"配置其他 MongoDB 服务"},{"id":"对于-docker-部署-1","content":"对于 Docker 部署"},{"id":"对于进阶部署-1","content":"对于进阶部署"}]},"tag":"core","url":"/docs/core/extra","title":"拓展内容","description":"此部分内容将说明一些额外的操作流程，请根据自己需要进行配置"},{"id":"/docs/core/features","structured":{"contents":[{"heading":"日记","content":"作为个人空间，日记是必不可少的功能。Mix Space 的日记功能非常强大，它支持："},{"heading":"日记","content":"标记「回顾日记」，并自动将其归档到「回顾日记」页面"},{"heading":"日记","content":"私人日记密码保护，只有知道密码的人才能查看"},{"heading":"日记","content":"定时发布，可以将日记定时发布到未来的某个时间点"},{"heading":"评论","content":"评论是一个网站的重要组成部分，Mix Space 的评论功能非常强大，它支持："},{"heading":"评论","content":"反垃圾评论，使用 Mix Space 的反垃圾评论系统配合多种自定义规则，可以有效的防止垃圾评论"},{"heading":"评论","content":"邮件通知，当有人评论时，会发送邮件通知给文章作者"},{"heading":"xlog-集成","content":"通过 Mix Space 的 xLog 功能，你可以将你的博客文章同步到 xLog 平台。并且当你没有为文章写摘要的时候，可以直接使用 xLog 平台生成的摘要，当然你也可以使用自己的 GPT API Key 去调用 GPT 生成文章摘要。"},{"heading":"xlog-集成","content":"xLog 是面向所有人的最棒的链上、开源的博客社区。"},{"heading":"文件管理","content":"你可以使用 Mix Space 上传文件，然后在任意地方中使用，比如文章中，或者是日记中。你可以使用 Markdown 语法插入图片，也可以使用 HTML 语法插入图片。"},{"heading":"通知","content":"Mix Space 支持多种通知方式，让你不错过任何一条重要的通知。"},{"heading":"通知","content":"邮件通知，当有人评论时，会发送邮件通知给文章作者"},{"heading":"通知","content":"Bark 通知支持"},{"heading":"友链","content":"Mix Space 的友链系统支持自助申请，你可以在后台设置是否需要审核，如果需要审核，你可以在后台设置通过 OR 拒绝理由。并且在后台可以看到友链的可用性检查结果。"},{"heading":"计划任务","content":"Mix Space 有着强大的计划任务功能，它们都被统一管理，你可以在后台执行计划任务："},{"heading":"计划任务","content":"备份数据库"},{"heading":"计划任务","content":"清除缓存、访问记录、临时文件"},{"heading":"计划任务","content":"推送百度搜索"},{"heading":"计划任务","content":"推送 Algolia 搜索"},{"heading":"计划任务","content":"删除过期的数据"},{"heading":"计划任务","content":"etc..."},{"heading":"其他","content":"Mix Space 还有很多其他功能，比如："},{"heading":"其他","content":"动态化配置前端，你可以在后台设置前端的配置，比如网站名称，网站描述，网站图标等等"},{"heading":"其他","content":"云函数，你可以在后台设置云函数，让你的网站更加强大"},{"heading":"其他","content":"Algolia Search，你可以在后台设置 Algolia Search，让你的网站支持站内搜索功能"},{"heading":"其他","content":"项目展示功能，你可以向访客展示你的项目，展现你的技术能力"},{"heading":"其他","content":"迁移，Mix Space 支持从 Markdown 导入文章，也支持导出文章为 Markdown。"}],"headings":[{"id":"日记","content":"日记"},{"id":"评论","content":"评论"},{"id":"xlog-集成","content":"xLog 集成"},{"id":"文件管理","content":"文件管理"},{"id":"通知","content":"通知"},{"id":"友链","content":"友链"},{"id":"计划任务","content":"计划任务"},{"id":"其他","content":"其他"}]},"tag":"core","url":"/docs/core/features","title":"主要功能"},{"id":"/docs/core","structured":{"contents":[{"heading":"","content":"在本章节，我们将完成的是 后端 的安装，而 前端 的安装则需要你阅读 前端主题文档。"},{"heading":"","content":"Mix Space 是一个一款简洁而不简单的个人博客系统，它够快，够现代。你可以利用它构建一个属于自己的个人空间，记录生活，分享知识。"},{"heading":"","content":"Linux / macOS"},{"heading":"","content":"Linux 内核版本 >= 4.19"},{"heading":"","content":"Memory >= 1G"},{"heading":"快速开始","content":"我们提供了两种部署方式，社区贡献了一种自动脚本模式，同时社区用户也分享了更多的部署方式，你可以根据自己的喜好选择一种部署方式。"},{"heading":"快速开始","content":"还有更多部署方式吗？欢迎您向文档提交 Pull Request 以分享您的部署方式。按上方后端部署文档完成你的部署后，你可以通过下面的方式继续部署 Mix Space 前端 （为什么分开部署？请查看 一些你需要知道的事情）"},{"heading":"遇到报错怎么办","content":"新时代新风气，我们遇到了一个人工智能蓬勃发展的时代，所以在你遇到了问题的时候请先询问 各种 Ai 助手程序，它们会帮助你解决大部分疑问。"},{"heading":"遇到报错怎么办","content":"如果你遇到了一些人工智能解决不了的问题，那么请再次阅读文档，如果文档依旧没有解决你的问题，那么请在对应仓库的 GitHub Issues 中提出你的问题，我们会尽快解决。"},{"heading":"mix-space-的组成结构","content":"所以，Mix Space 由两部分组成：后端 和 前端。如果你没法理解的话，请先询问 各种 Ai 助手程序关于前后端分离博客程序的定义，比如ChatGPT、Claude、Gemini、Kimi 等等，以此来了解它们、以及知道它们的区别。"},{"heading":"mix-space-的组成结构","content":"总之你需要知道的便是：这不是像 Typecho、WordPress 这样的「一步曲」就搞定的系统，而是需要 「两步曲」 才能完成安装。"},{"heading":"mix-space-的组成结构","content":"但万幸的是，我们开发者已经为你准备好了一切，你只需要按照文档推荐的步骤来操作即可，即使你不是开发者，也可以轻松完成安装。"},{"heading":"mix-space-的组成结构","content":"知道了这些，你就可以避免掉大部分的问题了，开始安装体验吧！"}],"headings":[{"id":"快速开始","content":"快速开始"},{"id":"一些你需要知道的事情","content":"一些你需要知道的事情"},{"id":"遇到报错怎么办","content":"遇到报错怎么办？"},{"id":"mix-space-的组成结构","content":"Mix Space 的组成结构"}]},"tag":"core","url":"/docs/core","title":"引言"},{"id":"/docs/development/admin","structured":{"contents":[{"heading":"","content":"在正常情况下，你不需要单独部署后台，因为后台已经被打包到了后端中。"},{"heading":"","content":"如果你有以下需求："},{"heading":"","content":"想使用其他域名作为后台地址"},{"heading":"","content":"想使用其他端口作为后台地址"},{"heading":"","content":"那么你可以选择单独部署后台，或者你可以参考 反向代理配置。"},{"heading":"修改配置文件","content":"进入到后台源码目录，找到 .env.production 文件，取消对应配置项的注释，然后修改为你的配置。"},{"heading":"修改配置文件","content":"例如："},{"heading":"修改配置文件","content":"其他可以定义的配置在文件 /src/configs.ts 中。"},{"heading":"构建","content":"构建 mx-admin 需要的内存至少为 2 Gib，如果你服务器内存不足，你可以在本地构建成功后，将产物上传到服务器。"},{"heading":"构建","content":"在 Windows 系统上，mx-admin 无法正常构建，你可以使用 WSL2 或者 Linux 系统。"},{"heading":"部署产物","content":"构建生成的产物在 dist 目录下，你可以直接把它们移动到你准备好的后台网站的根目录下。"},{"heading":"部署产物","content":"假设你准备的后台网站域名是 admin.test.cn，"},{"heading":"部署产物","content":"网站根目录为 /var/www/admin.test.cn/，"},{"heading":"部署产物","content":"那么，你把 dist 目录下的所有文件移动到 /var/www/admin.test.cn/ 目录下即可。"},{"heading":"修改后端配置","content":"编辑 Core 的 .env 文件，修改 ALLOWED_ORIGINS ，添加你的后台域名。"},{"heading":"修改后端配置","content":"示例域名为 admin.test.cn 。"},{"heading":"修改后端配置","content":"例如："},{"heading":"修改后端配置","content":"然后重新启动 Core 即可："}],"headings":[{"id":"拉取源文件","content":"拉取源文件"},{"id":"修改配置文件","content":"修改配置文件"},{"id":"构建","content":"构建"},{"id":"部署产物","content":"部署产物"},{"id":"修改后端配置","content":"修改后端配置"}]},"tag":"development","url":"/docs/development/admin","title":"后台单独部署","description":"单独部署 Mix Space 的后台"},{"id":"/docs/development/frontend","structured":{"contents":[{"heading":"","content":"为什么要写这一节？我希望不再是只有 Kami 一个风格，能有更多主题可供选择。"},{"heading":"","content":"此系统采用了前后端分离的形式，并没有提供模板渲染的选择，所以前端项目可以使用任何框架和架构设计。但是虽然开发比较自由，但是也存在诸多不便，比如接口调用和数据定义，路由约定上。所以在这一节，具体讲讲如何开发前端项目。"},{"heading":"路由约定","content":"Kami 是由 NextJS、React 开发的，作为最最原始的项目，至今（截止 2021.12）已有近两年的历史，经过这些时间的沉淀，我希望前端项目路由的组织上能够遵守这一个约定。"},{"heading":"路由约定","content":"路由的约定能很大程度保证网站因更换不同前端主题导致 SEO 异常，死链接等问题。"},{"heading":"路由约定","content":"约定如下："},{"heading":"路由约定","content":"Path"},{"heading":"路由约定","content":"Descrition"},{"heading":"路由约定","content":"Mark"},{"heading":"路由约定","content":"/"},{"heading":"路由约定","content":"主页"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/posts"},{"heading":"路由约定","content":"博文列表"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/posts/:category/:slug"},{"heading":"路由约定","content":"博文详情页"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/pages/:slug"},{"heading":"路由约定","content":"独立页面详情页"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/notes/:nid"},{"heading":"路由约定","content":"日记详情页"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/feed"},{"heading":"路由约定","content":"RSS 订阅"},{"heading":"路由约定","content":"强制要求"},{"heading":"路由约定","content":"/:category/:slug"},{"heading":"路由约定","content":"302 -> /posts/:category/:slug"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/category/:slug"},{"heading":"路由约定","content":"分类中文章列表页"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/notes"},{"heading":"路由约定","content":"日记列表或者跳转最新日记页"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/notes/latest"},{"heading":"路由约定","content":"最新日记详情页"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/friends"},{"heading":"路由约定","content":"友链"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/says"},{"heading":"路由约定","content":"一言详情页"},{"heading":"路由约定","content":"可选"},{"heading":"路由约定","content":"/sitemap"},{"heading":"路由约定","content":"站点地图"},{"heading":"路由约定","content":"建议"},{"heading":"路由约定","content":"/timeline"},{"heading":"路由约定","content":"时间线"},{"heading":"路由约定","content":"可选"},{"heading":"路由约定","content":"/recently"},{"heading":"路由约定","content":"动态页"},{"heading":"路由约定","content":"可选"},{"heading":"路由约定","content":"/favorite/:type"},{"heading":"路由约定","content":"附加页"},{"heading":"路由约定","content":"可选"},{"heading":"路由约定","content":"/projects"},{"heading":"路由约定","content":"项目页"},{"heading":"路由约定","content":"可选"},{"heading":"路由约定","content":"/projects/:id"},{"heading":"路由约定","content":"项目详情页"},{"heading":"路由约定","content":"可选"},{"heading":"框架上的选择与建议","content":"建议选择附带 SSR 功能的现代化框架："},{"heading":"框架上的选择与建议","content":"React：NextJS, RakkasJS, umi"},{"heading":"框架上的选择与建议","content":"Vue: Vite (vite-ssr), NuxtJS"},{"heading":"框架上的选择与建议","content":"小程序："},{"heading":"框架上的选择与建议","content":"React: Remax, taro"},{"heading":"框架上的选择与建议","content":"Vue: uni-app"},{"heading":"接口调用与-sdk-的使用","content":"考虑到单独编写接口定义和返回类型太麻烦，这里提供一个 SDK 方便开发。"},{"heading":"接口调用与-sdk-的使用","content":"SDK 仍在 beta 阶段，未来接口可能出现变化。"},{"heading":"接口调用与-sdk-的使用","content":"详见：api-client"}],"headings":[{"id":"路由约定","content":"路由约定"},{"id":"框架上的选择与建议","content":"框架上的选择与建议"},{"id":"接口调用与-sdk-的使用","content":"接口调用与 SDK 的使用"}]},"tag":"development","url":"/docs/development/frontend","title":"前端开发指南","description":"开发 Mix Space 的前端"},{"id":"/docs/development","structured":{"contents":[{"heading":"","content":"为了方便开发者快速上手，我们提供了一些开发指南，帮助开发者快速了解和使用我们的产品。"},{"heading":"项目技术栈","content":"React"},{"heading":"项目技术栈","content":"NestJS"},{"heading":"项目技术栈","content":"TypeScript"},{"heading":"项目技术栈","content":"MongoDB"},{"heading":"项目技术栈","content":"Redis"},{"heading":"项目技术栈","content":"Docker"},{"heading":"项目技术栈","content":"你可以点击上面的链接了解更多有关这些技术的信息。"},{"heading":"启动开发环境","content":"此系统采用了前后端分离的形式，因此需要分别启动前端和后端的开发环境。"},{"heading":"启动开发环境","content":"但是由于不同的前端不同写法，我们认为作为一名开发者都应该知道如何 「举一反三」，并且不同的前端可能步骤会 大相径庭 ，因此我们不会提供如何启动前端开发环境的指南。"},{"heading":"启动开发环境","content":"有关前端开发设计指南，你可以在侧边栏中找到。"},{"heading":"启动开发环境","content":"你需要确定好你的开发环境中已经安装了以下工具："},{"heading":"启动开发环境","content":"Node.js (>= 20)"},{"heading":"启动开发环境","content":"PNPM"},{"heading":"启动开发环境","content":"MongoDB"},{"heading":"启动开发环境","content":"Redis"},{"heading":"启动开发环境","content":"Git"},{"heading":"启动后端","content":"首先，你需要克隆本仓库到你的本地（你可能需要 fork 一份到你的仓库中，并且使用 --depth=1 来加速克隆）："},{"heading":"启动后端","content":"然后，你需要安装依赖，我们使用了 PNPM 作为包管理器，并不建议你使用其他的管理器安装。"},{"heading":"启动后端","content":"在您提交相关 PR 时，我们也会检查您是否使用了 PNPM，如果没有，我们将会拒绝您的 PR（一个项目多个 lock 总不是一个好的选择）。"},{"heading":"启动后端","content":"接下来，我们就可以开始启动后端的开发环境了。"}],"headings":[{"id":"项目技术栈","content":"项目技术栈"},{"id":"启动开发环境","content":"启动开发环境"},{"id":"启动后端","content":"启动后端"}]},"tag":"development","url":"/docs/development","title":"开发指南","description":"开发 Mix Space 的指南"},{"id":"/docs/document","structured":{"contents":[{"heading":"","content":"我们随时欢迎你对 Mix Space 的文档做出贡献，但撰写文档是一件不易之事，我们更加希望你能规范贡献内容，减少我们的工作量。"},{"heading":"","content":"部分内容来自于 https://github.com/mx-space/docs-archived/pull/163"},{"heading":"","content":"在撰写本文档之前，请确保你有基础的 Markdown 知识，并了解 Markdown 的语法，如果你不够了解，请使用 Typora 等 Markdown 编辑器进行撰写。"},{"heading":"","content":"我们在目前 Mix Space 的 V3 文档中，使用的文档框架是 FumaDocs，它的文档地址是：https://fumadocs.vercel.app/"},{"heading":"","content":"请在撰写之前详细阅读它，并且在你设备本地完成撰写之后，在本地运行开发服务器进行工作情况检查，确保它符合你的预期，减少你 Pull Request 之后我们的检查工作量。"},{"heading":"一些规范","content":"撰写 Git Commit Message 时，请尽可能遵守 Git Commit Message 的规范，具体可在网络查询，如果你不了解，可以在本仓库使用 pnpm commit 命令在修改完成后引导生成它。"},{"heading":"一些规范","content":"中英文之间请使用空格隔开，这基本上是撰写中英文混合文本时大家所认同的基本规范。"},{"heading":"一些问题","content":"为什么要写这么全面呢？甚至教别人改动源码。"},{"heading":"一些问题","content":"这是极不正确的文档写法。"},{"heading":"一些问题","content":"别人会写的自然会写，不会写的教他，他会不知道这个地方到底要不要搞、怎么搞、是不是有另外一种方法。"},{"heading":"一些问题","content":"更多的选择只会影响新手的判断，让他们不知道到底该怎么做。"},{"heading":"一些问题","content":"偏偏就是出现改动源码的地方就是有多种选择："},{"heading":"一些问题","content":"你可以在文件后方传入值，比如 node index.js --arg1=value1"},{"heading":"一些问题","content":"你可以改动源码，在 xxx/xxx.ts 第 xxx 行到 xxx 行，修改对应的配置。"},{"heading":"一些问题","content":"你甚至可以写一个插件，在插件中进行配置。"},{"heading":"一些问题","content":"你这样让用户怎么选择？文档部署应该只选择最容易让人读明白的部署方式，这种改动源码的提一嘴在哪个文件就是了，为什么要写具体行数 & 告诉别人怎么改呢？"},{"heading":"一些问题","content":"如果碰到了一个 object，用户改漏了一个逗号，那这个问题的责任谁来承担呢？文档编写者吗？开发者吗？用户吗？"},{"heading":"一些问题","content":"很明显都不是，也很明显都要承担责任。不要让局面陷入到如此困境中 😕"},{"heading":"一些问题","content":"如果你有魔改方面的内容，可以提交到对应区域的社区部署教程内。"},{"heading":"一些问题","content":"这些面板程序随时都有可能会发生变化，我们无法保证文档的时效性。"},{"heading":"一些问题","content":"我们也不建议这样写任何官方类文档，因为会使得你的文档结构更加复杂，并且难以维护。"},{"heading":"一些问题","content":"本质上服务器面板部署方式的核心还是那几种方式。"},{"heading":"一些问题","content":"如果你有相关内容，可以提交到对应区域的社区部署教程内。"},{"heading":"一些问题","content":"我们希望文档的结构能够更加简洁易用，这样对开发者，对用户都有好处。"}],"headings":[{"id":"一些规范","content":"一些规范"},{"id":"一些问题","content":"一些问题"}]},"tag":"document","url":"/docs/document","title":"文档撰写","description":"Mix Space 的文档撰写规范"},{"id":"/docs/themes/community","structured":{"contents":[{"heading":"","content":"你可以参考他们的部署方式，但我们不保证它们的可用性。如果你也有教程想要与大家分享的话，欢迎您向文档提交 Pull Request 以分享您的部署方式。"}],"headings":[]},"tag":"themes","url":"/docs/themes/community","title":"社区分享","description":"社区用户分享的部署方式"},{"id":"/docs/themes","structured":{"contents":[],"headings":[]},"tag":"themes","url":"/docs/themes","title":"前端主题列表","description":"基于 Mix Space 后端 API 开发的前端主题列表"},{"id":"/docs/themes/kami","structured":{"contents":[{"heading":"","content":"下一个代替项目将会是 Shiro，当它完成之时，我便不再投入任何精力到 Kami 中。迎接未来总需要舍弃一些东西，非常感谢大家三年来使用 Kami，不管你是谁，都需要对你说声谢谢。—— Innei"},{"heading":"现状","content":"Kami 目前由 wibus-wee 维护，处于最小程度更新的兼容状态。更新仅针对与 Core 接口不兼容的问题，以确保 Kami 能继续正常运行。"},{"heading":"现状","content":"由于 Kami 主题已进入存档状态，本文档仅保持最小程度更新。请注意：使用 Kami 需要 Linux 内核版本 ≥ 4.19。"},{"heading":"现状","content":"如发现 Kami 与 Core 的不兼容问题，请在 Kami 仓库提交 issue 并详细描述问题。"},{"heading":"检查内核版本","content":"如果你的内核版本小于 4.19，请升级内核。或者使用最新的 Ubuntu / Debian。"},{"heading":"配置-env","content":"复制 .env.example 为 .env"},{"heading":"配置-env","content":"编辑 .env 文件，它看起来应该是这个样子的"},{"heading":"更新指南","content":"根据是否对 Kami 进行过修改，可以选择以下两种更新方式："},{"heading":"标准更新","content":"适用于未修改源代码的用户。"},{"heading":"标准更新","content":"即使未进行源码修改，也可能遇到代码合并冲突。此时建议参考下方的手动更新方法。"},{"heading":"手动更新","content":"适用于修改过源码的用户。"},{"heading":"手动更新","content":"将 kami 文件夹改为任意名字，例如修改为 kami.d，然后拉取 kami 前端仓库，更新到稳定版本："},{"heading":"手动更新","content":"然后将更新前之前配置时修改过的文件，如在 kami.d 中的 .env 和 public 文件夹复制到 kami，将你的修改的部分依次修改替换完成。"},{"heading":"手动更新","content":"安装依赖、构建、启动前端："}],"headings":[{"id":"现状","content":"现状"},{"id":"安装步骤","content":"安装步骤"},{"id":"检查内核版本","content":"检查内核版本"},{"id":"克隆项目","content":"克隆项目"},{"id":"安装依赖","content":"安装依赖"},{"id":"配置-env","content":"配置 ENV"},{"id":"开始构建","content":"开始构建"},{"id":"启动前端","content":"启动前端"},{"id":"更新指南","content":"更新指南"},{"id":"标准更新","content":"标准更新"},{"id":"手动更新","content":"手动更新"}]},"tag":"themes","url":"/docs/themes/kami","title":"Kami 主题","description":"一个简洁、优雅、现代的博客主题"},{"id":"/docs/themes/yun","structured":{"contents":[{"heading":"","content":"由于 Yun 主题将不再维护，此文档将不再更新，但是你仍然可以使用它。"},{"heading":"配置服务","content":"如果你部署 Mix Space 后端与部署 Yun 前端在同一台服务器，并且后端监听的端口为 2333，那么你可以跳过这一步。"},{"heading":"配置服务","content":"前往 ./server/constant.ts"},{"heading":"配置服务","content":"修改为你的后端 API 地址。"}],"headings":[{"id":"安装步骤","content":"安装步骤"},{"id":"克隆项目","content":"克隆项目"},{"id":"安装依赖","content":"安装依赖"},{"id":"配置服务","content":"配置服务"},{"id":"开始构建","content":"开始构建"},{"id":"启动前端","content":"启动前端"}]},"tag":"themes","url":"/docs/themes/yun","title":"Yun 主题","description":"A light & fast & lovely mx web style."},{"id":"/docs/usage/backup","structured":{"contents":[{"heading":"备份","content":"在后端中 其他 - 备份 中点击立即备份，即备份到绝对目录："},{"heading":"备份","content":"~/mx-space/core/data/mx-space/backup/20xx-xx-xx_xx:xx:xx/backup-20xx-xx-xx_xx:xx:xx.zip"},{"heading":"自动备份","content":"目前该功能仅支持备份到支持 S3 协议的云服务，暂不支持其他类型的云服务。当然，你也可以通过设置计划任务等方法达到和此功能一样的效果。"},{"heading":"自动备份","content":"设置入口：设定 - 系统 - 备份，填入云服务所提供的对应参数即可。"},{"heading":"回滚","content":"该操作涉及修改数据库，请多备份几个工作日的 backup，数据无价请谨慎操作！"},{"heading":"回滚","content":"一般情况下回滚只会导致 analyze 数据页丢失 IP & PV 的数据。"},{"heading":"回滚","content":"Linux 和 macOS 可直接上传备份包，并且无需修改包名一致即可回滚，以下操作仅针对使用 Windows 用户访问后端回滚的情况。"},{"heading":"回滚","content":"在后端中 其他 - 备份 中点击立即备份，将之前在电脑里的 backup.zip 上传到刚刚生成的备份目录里进行重命名替换。"},{"heading":"回滚","content":"例：假如刚刚生成的备份是 backup-2022-09-01_23:33:33.zip 将想进行回滚的备份包 backup-2022-01-14_05:14:19.zip 修改为刚刚生成的备份一样的名字："},{"heading":"回滚","content":"不要在 Windows 下重命名，Windows 不支持将英文冒号作为文件名的一部分"},{"heading":"回滚","content":"替换完成会提示“数据库有变动，将在 x 秒后重载页面”，重载先检查文章评论等有没有丢失。"}],"headings":[{"id":"备份","content":"备份"},{"id":"自动备份","content":"自动备份"},{"id":"回滚","content":"回滚"}]},"tag":"usage","url":"/docs/usage/backup","title":"备份与回滚","description":"在 Mix Space 中内有备份功能，并且每日默认自动备份，数据无价请定期手动下载备份包。"},{"id":"/docs/usage","structured":{"contents":[{"heading":"","content":"本章节将会带您了解 Mix Space 的一些功能，以及如何使用它们。"},{"heading":"","content":"温馨提示：此指南需要一定的基础知识 & 理解能力，请准备好哦～"}],"headings":[{"id":"官方指南","content":"官方指南"}]},"tag":"usage","url":"/docs/usage","title":"使用指南","description":"探索 MixSpace 的使用方式"},{"id":"/docs/usage/oauth","structured":{"contents":[{"heading":"","content":"在 Core v7.0.0 版本，Mx-Space 重写了第三方登录功能，抛弃了 Clerk，转而直接使用对应的账户授权 SDK 实现第三方登录。"},{"heading":"新建应用","content":"参考以下两篇："},{"heading":"新建应用","content":"在 GitHub 新建 OAuth 应用"},{"heading":"新建应用","content":"在 Google Cloud Console 新建 OAuth 应用"},{"heading":"新建应用","content":"对于 GitHub，Homepage URL 填写前端地址，Authorization callback URL 根据后台提示复制粘贴。"},{"heading":"新建应用","content":"对于 Google，你可能需要先配置好 OAuth 权限请求页面，其中已获授权的网域填写根域名，API 范围选择非敏感范围的三项。OAuth 应用中 已获授权的 JavaScript 来源 填写前端地址，已获授权的重定向 URI 根据后台提示复制粘贴。"},{"heading":"新建应用","content":"完成后会获取 Client ID 和 Client Secret，将他们复制下来备用。"},{"heading":"后台设置","content":"进入博客后台 -> 设定 -> 登录方式，在 OAuth 部分对应的平台名称下填写对应的 Client ID 和 Client Secret，保存后测试是否可以调用授权，若可调用即可启用并保存。"},{"heading":"和主人身份绑定","content":"在测试时通过 OAuth 授权登录后会提示是否将此账号设置为主人，允许即可。"}],"headings":[{"id":"如何配置","content":"如何配置"},{"id":"新建应用","content":"新建应用"},{"id":"后台设置","content":"后台设置"},{"id":"和主人身份绑定","content":"和主人身份绑定"}]},"tag":"usage","url":"/docs/usage/oauth","title":"OAuth 2.0","description":"使用 OAuth 2.0 登录 MixSpace"},{"id":"/docs/usage/search","structured":{"contents":[{"heading":"介绍","content":"Algolia 是一个数据库实时搜索服务，能够提供毫秒级的数据库搜索服务，并且其服务能以 API 的形式方便地布局到网页、客户端、APP 等多种场景。"},{"heading":"介绍","content":"像 VuePress 官方文档就是使用的 Algolia 搜索，使用 Algolia 搜索最大的好处就是方便，它会自动爬取网站的页面内容并构建索引，你只用申请一个 Algolia 服务，在网站上添加一些代码，就可以实现一个全文搜索功能。"},{"heading":"使用","content":"在这之前，你需要先在 Algolia 官网注册一个账号，或者直接用第三方登录。"},{"heading":"新建应用","content":"登录 Algolia 账号，进入控制台，在左上角点击 Applications 下列表，点击 New Application，填写应用名称，选择 BUILD 订阅（免费），选择好数据中心，点击 Create Application，即可创建一个应用。"},{"heading":"新建应用","content":"一些额外说明的地方都在图片上标注了，可参考下面的图片。"},{"heading":"创建索引index","content":"在新建应用之后，你会直接跳转到如下图所示的界面，只需要在输入框中输入一个索引名称，点击 Create Index，即可创建一个索引。"},{"heading":"创建索引index","content":"请记住你所创建的索引名称（Index Name），后面的步骤会用到。"},{"heading":"获取相关变量","content":"接下来，在左下角找到齿轮图标，进入设置，在右侧找到 API Keys，进入，这里有两个变量需要复制下来备用，分别是 Application ID 和 Admin API Key，请复制下这两个变量的值，后面的步骤会用到。"},{"heading":"后台配置","content":"进入后台，设定->系统->Algolia Search，将“开启 Algolia Search”开关打开，将前面准备的 IndexName、Application ID（AppID） 和 Admin API Key（ApiKey） 填入对应的框中，右上角保存即可。"},{"heading":"后台配置","content":"至此，Algolia 搜索的配置就完成了。稍等一会，就可以尝试在主页用 Ctrl + K 调用 Algolia* 进行站内搜索了。*"}],"headings":[{"id":"介绍","content":"介绍"},{"id":"使用","content":"使用"},{"id":"新建应用","content":"新建应用"},{"id":"创建索引index","content":"创建索引（Index）"},{"id":"获取相关变量","content":"获取相关变量"},{"id":"后台配置","content":"后台配置"}]},"tag":"usage","url":"/docs/usage/search","title":"Algolia Search","description":"使用 Algolia 搜索"},{"id":"/docs/usage/security","structured":{"contents":[{"heading":"","content":"在 v3.41.0 后续版本，加入了敏感 Key 加密功能。默认为关。"},{"heading":"","content":"为什么需要 Key 加密。"},{"heading":"","content":"假设黑客通过某种手段数据库被脱库。如果开启了 Key 加密，即便是拿到了全部数据也不能解密某些关键数据，例如配置项中的各类 API Key。"},{"heading":"","content":"但是，也需要谨慎开启此功能，开启后你需要记住加密秘钥。否则，你也将会永远丢失这些数据。"},{"heading":"如何开启","content":"你可以附加 --encrypt_enable 来启动服务。如："},{"heading":"如何开启","content":"可以通过附加 --encrypt_key <key> 来指定加密密钥，长度必须为 64 位，且只有小写字母和数字。请牢记此密钥。或者通过环境变量 MX_ENCRYPT_KEY 也可以指定密钥。"},{"heading":"如何开启","content":"若开启加密，则需注意密钥长度必须为 64 位且只有小写字母和数字，不然会在初始化时报错。注意这是不可逆的，务必保存自己的秘钥。\nAPI Key."},{"heading":"如何开启","content":"密钥可以通过 openssl rand -hex 32 命令生成。请务必牢记。"},{"heading":"如何开启","content":"MX_ENCRYPT_KEY --encrypt_key 不是必须的，默认取机器的\nmachine-id。"},{"heading":"如何开启","content":"此操作是不可逆的，操作前请备份数据库。"},{"heading":"自动化加密配置进阶指令非必要","content":"此操作是不可逆的，操作前请备份数据库。"},{"heading":"疑难解答","content":"如果出现 Invalid key length，请你确定是否开启了此功能，并且 key 的长度是否为 64 位长度，且只有小写字母和数字。"}],"headings":[{"id":"如何开启","content":"如何开启"},{"id":"自动化加密配置进阶指令非必要","content":"自动化加密配置（进阶指令）（非必要）"},{"id":"疑难解答","content":"疑难解答"}]},"tag":"usage","url":"/docs/usage/security","title":"Key 加密与安全性","description":"加密你的 MixSpace"},{"id":"/docs/usage/serverless","structured":{"contents":[{"heading":"介绍","content":"云函数是 Mix Space 中的一个重要功能，它极大地提升了使用者在 Mix Space 中的体验。通过云函数，Mix Space 可以额外实现实现歌单解析，追番列表等等的功能。"},{"heading":"介绍","content":"你可以在此处看到 Mix Space 目前收录的云函数 Snappets"},{"heading":"使用","content":"有一些前端主题需要使用云函数，这个时候你需要进入到云函数设置界面，将云函数代码填入到对应的位置。"},{"heading":"1-进入云函数设置界面","content":"进入后台管理，点击左侧菜单栏的 其他 - 云函数，即可进入云函数管理页面。"},{"heading":"2-下载扩展包","content":"在右上方，点击 下载拓展包，你将会看到一个弹窗。"},{"heading":"3-导入","content":"请在弹窗内请找到对应的主题的云函数代码，点击导入，即可完成下载对应的云函数代码。"},{"heading":"3-导入","content":"接下来，你可以在云函数管理页面看到你刚刚导入的云函数代码。"}],"headings":[{"id":"介绍","content":"介绍"},{"id":"使用","content":"使用"},{"id":"1-进入云函数设置界面","content":"1. 进入云函数设置界面"},{"id":"2-下载扩展包","content":"2. 下载扩展包"},{"id":"3-导入","content":"3. 导入"},{"id":"开发者文档","content":"开发者文档"}]},"tag":"usage","url":"/docs/usage/serverless","title":"云函数","description":"使用 MixSpace 的云函数功能"},{"id":"/docs/usage/update","structured":{"contents":[{"heading":"","content":"开头介绍就说过，Mx-Space 分为前端和后端两个部分，因此，更新的时候二者也需要分开更新。"},{"heading":"core后端更新","content":"根据部署方式的不同，更新方式也有不同。"},{"heading":"docker-部署","content":"进入 core 所在文件夹，然后 docker compose pull && docker compose up -d"},{"heading":"进阶部署","content":"进入克隆 core 的文件夹，执行 git pull origin master 拉取新版本源码，随后正常进行 pnpm i -> pnpm build -> pnpm bundle。"},{"heading":"进阶部署","content":"随后 进入 ./apps/core/out，执行以下命令启动服务 pm2 start ecosystem.config.js"},{"heading":"前端更新","content":"请根据自己所部署的主题跳转到对应的更新部分完成更新。"}],"headings":[{"id":"core后端更新","content":"Core（后端）更新"},{"id":"docker-部署","content":"Docker 部署"},{"id":"进阶部署","content":"进阶部署"},{"id":"前端更新","content":"前端更新"}]},"tag":"usage","url":"/docs/usage/update","title":"更新 Mix Space","description":"更新你的 MixSpace"},{"id":"/docs/usage/xlog","structured":{"contents":[{"heading":"介绍","content":"此功能需要："},{"heading":"介绍","content":"Core: >=3.43.1"},{"heading":"介绍","content":"xLog 功能可以将你的博客同步到 xLog 平台。"},{"heading":"介绍","content":"具体就是 此文章已经由它的创作者签名并安全地存储在区块链上。"},{"heading":"介绍","content":"当你没有为文章写摘要的时候，可以使用 xLog 平台生成的摘要，当然你也可以使用自己的 GPT API Key 去调用 GPT 去生成摘要。"},{"heading":"使用","content":"在 系统 - 第三方服务集成，填写 xLog SiteId 即可，然后去 xLog 平台去升级为钱包登录即可。钱包的注册方法请根据 xLog 的引导一步步注册。"},{"heading":"使用","content":"SiteId 是一个字符串，可以在 xLog 平台的设置 - 域名找到；例如 example.xlog.app，即 SiteId = example。"},{"heading":"使用","content":"当你完成钱包的注册，并使用钱包登录 xLog 平台的时候，就完成设置工作了。"},{"heading":"使用","content":"接下来你发布文章的时候，会自动的进行同步和签名；当然，需要经过你的同意。"}],"headings":[{"id":"介绍","content":"介绍"},{"id":"使用","content":"使用"}]},"tag":"usage","url":"/docs/usage/xlog","title":"xLog 集成","description":"使用 xLog 集成"},{"id":"/docs/themes/shiro/config","structured":{"contents":[{"heading":"页脚信息-footer","content":"此部分定义页脚的部分信息，主要包括备案、建站年份和页脚导航三部分。"},{"heading":"备案信息-otherinfoicp","content":"如何使用: 根据示例，修改位于 text 的备案号以及备案号所指向的链接 link。"},{"heading":"建站年份-otherinfodate","content":"如何使用: {{now}} 指向当前年份，其他略。"},{"heading":"页脚导航-linksections","content":"分类包括 name 和 links 两个字段，对应分类名字及其下链接，其下链接又分为 name、href、external 三个字段，对应链接名字，指向链接和是否外链三个属性。"},{"heading":"页脚导航-linksections","content":"如何使用: 根据自己需要增删或修改特定链接及分类，需要注意如果指向外链的话需要加一行 \"external\": true。"},{"heading":"站点信息-configsite","content":"此部分包含了网站的基础信息设置，例如 favicon（网站图标）的配置。"},{"heading":"favicon","content":"favicon: 设置网站在浅色模式下使用的图标。"},{"heading":"favicon","content":"faviconDark: 设置网站在深色模式下使用的图标。"},{"heading":"hero-部分-confighero","content":"hero 部分定义了网站首页的主要欢迎信息或介绍部分，这是访问者首次进入网站时看到的部分。"},{"heading":"title-模板-titletemplate","content":"包括多个元素（如 h1, code, span），每个元素都可以自定义文本内容和样式（通过 CSS 类）。"},{"heading":"title-模板-titletemplate","content":"如何使用: 修改 text 和 class 字段来自定义标题的文本内容和样式。你可以通过添加或删除元素来调整标题的结构。"},{"heading":"描述-description","content":"提供了对主页 hero 部分的简短描述。"},{"heading":"描述-description","content":"如何使用: 直接修改 description 的值以更改介绍文本。"},{"heading":"一言-hitokoto","content":"此特性为闭源版本特有"},{"heading":"一言-hitokoto","content":"提供自定义首页一言的功能。"},{"heading":"一言-hitokoto","content":"接受一个对象，包含 random 和 custom 两个可选字段。"},{"heading":"一言-hitokoto","content":"当存在 random 字段时，将会随机获取一言。优先级高于 custom 字段。"},{"heading":"一言-hitokoto","content":"当存在 custom 字段时，将会使用自定义的一言。"},{"heading":"一言-hitokoto","content":"如果两个字段都不存在，将会使用默认的一言。"},{"heading":"自定义脚本-configcustom","content":"可以配置自定义的 CSS, Script。"},{"heading":"scripts-scripts","content":"接受一个 Script Props 参数数组。"},{"heading":"styles-styles","content":"自定义 CSS。接受一个字符串数组。"},{"heading":"javascript-tag-js","content":"自定义 JS 脚本。接受一个字符串数组。"},{"heading":"css-href-link-css","content":"加载外部 CSS，接受一个 CSS 外部样式表链接数组。"},{"heading":"模块-configmodule","content":"此部分配置了网站的一些特定功能模块，比如活动跟踪、捐赠支持、社交媒体链接等。"},{"heading":"实时活动-activity-模块","content":"enable: 控制模块是否启用。"},{"heading":"实时活动-activity-模块","content":"endpoint: 指定活动更新的服务器端点。"},{"heading":"实时活动-activity-模块","content":"如何使用: 若需开启活动跟踪功能，将 enable 设为 true 并设置 endpoint 为处理活动数据的服务器地址。"},{"heading":"捐赠-donate-模块","content":"enable: 控制捐赠模块是否启用。"},{"heading":"捐赠-donate-模块","content":"link: 提供捐赠页面的链接。"},{"heading":"捐赠-donate-模块","content":"qrcode: 提供一或多个捐赠二维码图片的链接。"},{"heading":"捐赠-donate-模块","content":"如何使用: 启用捐赠功能，并提供捐赠链接或捐赠二维码，以便支持者可以直接进行捐赠。"},{"heading":"社交媒体-bilibili-模块","content":"liveId: b 站直播间 ID"},{"heading":"openpanel-模块","content":"此特性为闭源版本特有"},{"heading":"openpanel-模块","content":"OpenPanel 是一个交互式面板工具。"},{"heading":"openpanel-模块","content":"enable: 控制 OpenPanel 功能是否启用。"},{"heading":"openpanel-模块","content":"id: OpenPanel 的 ID。"},{"heading":"openpanel-模块","content":"url: OpenPanel 的访问地址。"},{"heading":"openpanel-模块","content":"如何使用: 如果你使用 OpenPanel 提供交互式面板或其他功能，通过这些配置连接并显示面板。"},{"heading":"签名动画-signature-模块","content":"此特性为闭源版本特有"},{"heading":"签名动画-signature-模块","content":"svg: 签名的 svg 代码。"},{"heading":"签名动画-signature-模块","content":"如何使用: 请参考文档。"},{"heading":"文章列表设定-posts","content":"此特性为闭源版本特有"},{"heading":"文章列表设定-posts","content":"mode: 文章列表的预览模式。可选的值：\"loose\"(默认值) \"compact\""},{"heading":"文章列表设定-posts","content":"两个模式，紧凑模式和松散模式。"}],"headings":[{"id":"配置项","content":"配置项"},{"id":"页脚信息-footer","content":"页脚信息 (footer)"},{"id":"备案信息-otherinfoicp","content":"备案信息 (otherInfo.icp)"},{"id":"建站年份-otherinfodate","content":"建站年份 (otherInfo.date)"},{"id":"页脚导航-linksections","content":"页脚导航 (linkSections)"},{"id":"站点信息-configsite","content":"站点信息 (config.site)"},{"id":"favicon","content":"Favicon"},{"id":"hero-部分-confighero","content":"Hero 部分 (config.hero)"},{"id":"title-模板-titletemplate","content":"Title 模板 (title.template)"},{"id":"描述-description","content":"描述 (description)"},{"id":"一言-hitokoto","content":"一言 (hitokoto)"},{"id":"自定义脚本-configcustom","content":"自定义脚本 (config.custom)"},{"id":"scripts-scripts","content":"Scripts (scripts)"},{"id":"styles-styles","content":"Styles (styles)"},{"id":"javascript-tag-js","content":"JavaScript tag (js)"},{"id":"css-href-link-css","content":"CSS href link (css)"},{"id":"模块-configmodule","content":"模块 (config.module)"},{"id":"实时活动-activity-模块","content":"实时活动 (activity) 模块"},{"id":"捐赠-donate-模块","content":"捐赠 (donate) 模块"},{"id":"社交媒体-bilibili-模块","content":"社交媒体 (bilibili) 模块"},{"id":"openpanel-模块","content":"OpenPanel 模块"},{"id":"签名动画-signature-模块","content":"签名动画 (signature) 模块"},{"id":"文章列表设定-posts","content":"文章列表设定 (posts)"}]},"tag":"themes","url":"/docs/themes/shiro/config","title":"配置","description":"Shiro 主题的配置文件信息"},{"id":"/docs/themes/shiro/deploy","structured":{"contents":[{"heading":"前提要求","content":"你已安装 Mix Space 后端并且已启动"},{"heading":"前提要求","content":"（选择 Vercel 部署）已注册 Vercel 和 GitHub 账号"},{"heading":"前提要求","content":"自 Core v7 起，已抛弃 Clerk，取而代之的是 GitHub 和 Google 的 OAuth 2.0，\n配置步骤请参考 OAuth 2.0"},{"heading":"前提要求","content":"请注意，Shiro 主题的部署教程与初版有所不同，如果你已经部署过 Shiro\n主题，请重新阅读本文档（尤其是填入配置文件环节，配置有所变化），并阅读\n「移除 Edge Config」 部分。"},{"heading":"设置主题配置","content":"进入 Mix Space 后台，进入「配置与云函数」页面，点击右上角的新增按钮，在编辑页面中，填入以下设置："},{"heading":"设置主题配置","content":"名称：shiro"},{"heading":"设置主题配置","content":"引用：theme"},{"heading":"设置主题配置","content":"数据类型：JSON"},{"heading":"设置主题配置","content":"数据：（点击下方的按钮复制）"},{"heading":"设置主题配置","content":"请注意，这份配置你需要自行修改成符合你的需求的配置。直接使用下面的配置可能会导致你的博客无法按照你的预期运行。"},{"heading":"设置主题配置","content":"下面的配置可能不全，更多配置项的信息请移步 配置项 了解。"},{"heading":"设置主题配置","content":"此外，配置也可写成 yaml 格式，此时数据类型应选择 YAML。"},{"heading":"设置主题配置","content":"点击按钮保存配置，随后继续进行下面的步骤。"},{"heading":"配置环境变量","content":"在下方的配置表格中，填入你的环境变量，然后点击复制按钮，将环境变量复制到剪贴板中。"},{"heading":"克隆仓库","content":"登陆 GitHub 账号，打开 Innei/Shiro，点击右上角的 Fork 按钮，将仓库克隆到你的账号下。"},{"heading":"自定义-favicon","content":"修改你 Fork 的 Shiro 仓库中的 public 文件夹内容以使用你自己的 Favicon 。"},{"heading":"打开-vercel-创建项目","content":"登陆 Vercel 账号，点击右上角的 New Project 按钮，选择 Import Git Repository，选择你刚刚 Fork 的仓库，点击 Import 按钮，即可进入到项目配置页面。"},{"heading":"键入环境变量--开始部署","content":"在刚刚进入的 Vercel 项目配置页面中，点击 Environment Variables，然后键盘上的 Ctrl + V 将环境变量粘贴到输入框中，然后点击 Deploy 按钮，等待部署完成。"},{"heading":"键入环境变量--开始部署","content":"有关配置自定义域名的教程，请参考 Vercel 文档。"},{"heading":"通过预构建运行--docker-compose","content":"参见 README 相关部分 完成对应操作，随后配置反向代理。"},{"heading":"完成","content":"至此，你已完成了 Shiro 主题的部署，你可以访问你的博客了。"},{"heading":"更新主题","content":"使用 Vercel 托管的话，只需要在自己 Fork 的项目上 Sync Fork 即可（如图）。如果自己有魔改某些内容的话不要点击 Discard Changes，会把自己的魔改搞没了。"}],"headings":[{"id":"前提要求","content":"前提要求"},{"id":"准备步骤","content":"准备步骤"},{"id":"设置主题配置","content":"设置主题配置"},{"id":"配置环境变量","content":"配置环境变量"},{"id":"通过-vercel-部署","content":"通过 Vercel 部署"},{"id":"克隆仓库","content":"克隆仓库"},{"id":"自定义-favicon","content":"自定义 Favicon"},{"id":"打开-vercel-创建项目","content":"打开 Vercel 创建项目"},{"id":"键入环境变量--开始部署","content":"键入环境变量 & 开始部署"},{"id":"通过预构建运行--docker-compose","content":"通过预构建运行 & Docker Compose"},{"id":"完成","content":"完成！"},{"id":"更新主题","content":"更新主题"}]},"tag":"themes","url":"/docs/themes/shiro/deploy","title":"部署","description":"一个极简主义的个人网站，纸的纯净和雪的清新"},{"id":"/docs/themes/shiro/extra","structured":{"contents":[{"heading":"扩展的-markdown-语法","content":"参考 https://shiro.innei.in/#/markdown"},{"heading":"扩展的-markdown-语法","content":"对于 LinkCard 的解析，某些需要你填写 API Key，以下的键值都是填写在 .env 环境变量中"},{"heading":"扩展的-markdown-语法","content":"GitHub，默认直接用浏览器访问，可能受到 rate limit，可以填写 GH_TOKEN 以保证 API 可达性。"},{"heading":"扩展的-markdown-语法","content":"TMDB，必须填写 TMDB_API_KEY 才可以正确解析 tmdb 的链接。参考 https://post.smzdm.com/p/a5op4w33/ 这里获取 TOKEN"},{"heading":"我的动态","content":"Shiro 主题中，有一个可以在顶部显示博主当前正在做的事情的功能，这个功能是通过云函数和 ProcessReporter 软件实现的。"},{"heading":"我的动态","content":"非常感谢 Innei, timochan, TNXG 的贡献，目前 ProcessReporter 已支持全平台！"},{"heading":"配置云函数","content":"进入后台，点击左侧菜单栏的「其他 -> 配置与云函数」，然后点击新建按钮，在选项卡中填入以下信息："},{"heading":"配置云函数","content":"名称：update"},{"heading":"配置云函数","content":"引用：ps"},{"heading":"配置云函数","content":"数据类型：Function"},{"heading":"配置云函数","content":"请求方式：POST"},{"heading":"配置云函数","content":"这个地方还需要设置一个密钥，在 Secret 中填入 key，在 Value 中填入你自己的密钥。"},{"heading":"配置云函数","content":"这个密钥将用于验证你的软件是否有权限更新博主的动态，所以请务必设置一个复杂的密钥。"},{"heading":"配置云函数","content":"密钥在后面的步骤中还需要用到，所以请务必记住。"},{"heading":"配置云函数","content":"上方没有提到的选项都不需要填写，然后在右侧的代码编辑器中填入下面链接中的代码："},{"heading":"配置云函数","content":"点击保存按钮，云函数就配置完成了。"},{"heading":"配置云函数","content":"请关注此代码的更新，它可能会随时变化，你需要及时更新它们"},{"heading":"配置主题配置","content":"继续在「配置与云函数」页面，找到「theme -> shiro」配置，点击编辑，进入编辑页面，在代码中找到 module，加入 activity 配置，如下：（高亮部分）"},{"heading":"配置软件","content":"前往对应着你的电脑系统的软件的 GitHub 仓库，下载并打开 ProcessReporter。"},{"heading":"配置软件","content":"由于不同平台有不同的使用方法，不同的软件我们会在下方具体讲述。"},{"heading":"processreporter-mac","content":"打开软件后，你会发现你的系统菜单栏中多了一个图标，点击图标，然后点击「设置」，在弹出的窗口中填入你的信息："},{"heading":"processreporter-mac","content":"Endpoint：{你的API地址}/fn/ps/update （请将 {你的API地址} 替换为你的 API 地址，如：https://api.example.com/api/v2）"},{"heading":"processreporter-mac","content":"API Key：填入你刚刚在云函数中设置的密钥"},{"heading":"processreporter-mac","content":"如果你希望软件在开机时自动启动，可以勾选「Launch at login」选项。"},{"heading":"processreporter-mac","content":"接着关闭窗口，再次点击菜单栏中的图标，点击「Enable」即可。如果一切正常，刷新一下你的博客就可以在博客顶部看到你的动态了。"},{"heading":"processreporter-windows","content":"Windows 版本的使用问题，请前往 TNXG/ProcessReporterWinpy 查看。"},{"heading":"使用-gui-版本","content":"在 Releases 页面下载 ProcessReporterWinpy_Launcher.exe\n，配置好 config.yml 文件，然后运行 ProcessReporterWinpy_Launcher.exe 即可。"},{"heading":"使用-gui-版本","content":"config.yml 配置具体配置项以及说明请参考 TNXG/ProcessReporterWinpy。"},{"heading":"使用预编译的二进制文件","content":"在 Releases 页面下载 ProcessReporterWinpy.exe，配置好 config.yml 文件后，在终端运行即可，示例如下"},{"heading":"使用预编译的二进制文件","content":"config.yml 配置具体配置项以及说明请参考 TNXG/ProcessReporterWinpy。"},{"heading":"使用源代码","content":"下载代码后，修改 config.yml 文件，填入你的信息："},{"heading":"使用源代码","content":"api_url：{你的API地址}/fn/ps/update （请将 {你的API地址} 替换为你的 API 地址，如：https://api.example.com/api/v2）"},{"heading":"使用源代码","content":"api_key：填入你刚刚在云函数中设置的密钥"},{"heading":"使用源代码","content":"report_time: 上报间隔（单位：秒）"},{"heading":"使用源代码","content":"接着运行程序即可。如果一切正常，刷新一下你的博客你就可以在博客顶部看到你的动态了。"},{"heading":"processreporter-linux","content":"在仓库的 Releases 页面下载对应的二进制包，解压运行即可，具体请参照项目的 README 进行配置运行。"},{"heading":"processreporter-linux","content":"安装完成后，新建 .env.process 文件，填入你的信息："},{"heading":"processreporter-linux","content":"然后执行程序即可。如果一切正常，刷新一下你的博客你就可以在博客顶部看到你的动态了。"},{"heading":"processreporter-linux","content":"如果有什么疑问，可以去阅读该项目的 README"},{"heading":"个人状态展示","content":"设置当前的状态。"},{"heading":"配置云函数-1","content":"进入后台，点击左侧菜单栏的「其他 -> 配置与云函数」，然后点击新建按钮，在选项卡中填入以下信息："},{"heading":"配置云函数-1","content":"名称：status"},{"heading":"配置云函数-1","content":"引用：shiro"},{"heading":"配置云函数-1","content":"数据类型：Function"},{"heading":"配置云函数-1","content":"请求方式：ALL"},{"heading":"配置云函数-1","content":"这个地方还需要设置一个密钥，在 Secret 中填入 key，在 Value 中填入你自己的密钥。"},{"heading":"配置云函数-1","content":"这个密钥将用于验证你的软件是否有权限更新当前状态，所以请务必设置一个复杂的密钥。"},{"heading":"配置云函数-1","content":"密钥在后面的步骤中还需要用到，所以请务必记住。"},{"heading":"配置云函数-1","content":"上方没有提到的选项都不需要填写，然后在右侧的代码编辑器中填入下面链接中的代码："},{"heading":"配置云函数-1","content":"点击保存按钮，云函数就配置完成了。"},{"heading":"配置云函数-1","content":"请关注此代码的更新，它可能会随时变化，你需要及时更新它们"},{"heading":"设置状态","content":"在主页登录之后，你可以点击此头像的右下方设置状态。"},{"heading":"签名动画","content":"此特性为闭源版本特有"},{"heading":"签名动画","content":"在「配置与云函数」页面，找到「theme -> shiro」配置，进入编辑页面，在代码中找到 module，加入 signature 配置，如下（高亮部分）："},{"heading":"签名动画","content":"其中 svg 后填生成的 svg 代码，可通过 此网站 进行生成。"},{"heading":"签名动画","content":"受限于 Json 语法规则，此处 svg 代码需替换所有的 \" 为 \\\"，否则会报错。"}],"headings":[{"id":"额外功能","content":"额外功能"},{"id":"扩展的-markdown-语法","content":"扩展的 Markdown 语法"},{"id":"我的动态","content":"我的动态"},{"id":"配置云函数","content":"配置云函数"},{"id":"配置主题配置","content":"配置主题配置"},{"id":"配置软件","content":"配置软件"},{"id":"processreporter-mac","content":"ProcessReporter Mac"},{"id":"processreporter-windows","content":"ProcessReporter Windows"},{"id":"使用-gui-版本","content":"使用 GUI 版本"},{"id":"使用预编译的二进制文件","content":"使用预编译的二进制文件"},{"id":"使用源代码","content":"使用源代码"},{"id":"processreporter-linux","content":"ProcessReporter Linux"},{"id":"个人状态展示","content":"个人状态展示"},{"id":"配置云函数-1","content":"配置云函数"},{"id":"设置状态","content":"设置状态"},{"id":"签名动画","content":"签名动画"}]},"tag":"themes","url":"/docs/themes/shiro/extra","title":"额外功能","description":"Shiro 主题的额外功能配置"}]